{"componentChunkName":"component---src-template-blog-post-template-js","path":"/blog/localstorage-in-javascript","result":{"data":{"markdownRemark":{"html":"<p>Local storage allows us to store the data in the user's browser. The data stored will not be deleted even after the browser is closed.</p>\n<p>The data will be stored in the form of key/value pairs. Both keys and values are always strings.</p>\n<h3>Storing the data</h3>\n<p>For example, we have a user whose preferences/settings needs to be stored in the <code class=\"language-text\">localStorage</code>. Let's create a <code class=\"language-text\">userPreferences</code> object with the user settings.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> userPreferences <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  darkMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  accentColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we'll store it in the browser using <code class=\"language-text\">localStorage.setItem</code> method</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringfy</span><span class=\"token punctuation\">(</span>userPreferences<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here <code class=\"language-text\">userData</code> is key and <code class=\"language-text\">userPreferences</code> is the value. The reason we are using <code class=\"language-text\">JSON.stringfy</code> method is to convert the <code class=\"language-text\">userPreferences</code> object to a string.</p>\n<h3>Retrieving the data</h3>\n<p>When we need to use the data, we can retrieve it using <code class=\"language-text\">localStorage.getItem</code> method by passing the key as the argument. The data returned will be in the form of a string, so we need to use <code class=\"language-text\">JSON.parse</code> method to convert it into an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> userData <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"{ darkMode: true, accentColor:'red'}\"</span>\n\n<span class=\"token comment\">//convert the string to an object</span>\nuserData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { darkMode: true, accentColor: 'red'}</span></code></pre></div>\n<h3>Clearing the data</h3>\n<p>If you want to clear all the data stored in the local storage, we need to use <code class=\"language-text\">localStorage.clear</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Removing the particular data</h3>\n<p>If you want to remove data for a particular key, we need to use <code class=\"language-text\">localStorage.removeItem</code> method by passing key as the argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3>Session Storage</h3>\n<p><code class=\"language-text\">sessionStorage</code> is same as <code class=\"language-text\">localStorage</code> . But the main difference is, the data stored will be cleared automatically when the user closes the web page. All the methods are also same.</p>\n<h3>Limitations</h3>\n<p>Do not store any sensitive data in the local storage as it can be accessed by any one browsing the page. And there is no form of data protection.</p>\n<h3>Example</h3>\n<p>If you're reading this on <em><a href=\"https://dev.to\">Dev.to</a></em>, Open the developer tools by pressing <code class=\"language-text\">ctrl(cmd) + shift + I</code> and go to <strong>Application â†’ Local Storage</strong>. There you'll find how <em><a href=\"dev.to\">Dev.to</a></em> using local storage for storing user details with the key <code class=\"language-text\">current_user</code>.</p>\n<p>If you're reading this on my blog, repeat the above steps and you'll see how I'm using local storage for persisting the dark mode using the key <code class=\"language-text\">darkMode</code>.</p>\n<p>Thank You.</p>\n<h3>Reference</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">LocalStorage - MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">Session Storage - MDN</a></p>","frontmatter":{"title":"How to use Local Storage in JavaScript?","date":"04 August, 2019","path":"/blog/localstorage-in-javascript","tags":["JavaScript"]},"timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pathSlug":"/blog/localstorage-in-javascript"}}}